{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Downloads/candle-pools-burn/src/pages/Earn/index.tsx\";\nimport React from 'react';\nimport { AutoColumn } from '../../components/Column';\nimport styled from 'styled-components';\nimport { STAKING_REWARDS_INFO, useStakingInfo } from '../../state/stake/hooks';\nimport { TYPE, ExternalLink } from '../../theme';\nimport PoolCard from '../../components/earn/PoolCard';\nimport { RowBetween } from '../../components/Row';\nimport { CardSection, DataCard, CardNoise, CardBGImage } from '../../components/earn/styled';\nimport { Countdown } from './Countdown';\nimport Loader from '../../components/Loader';\nimport { useActiveWeb3React } from '../../hooks'; // import { JSBI } from '@uniswap/sdk'\n// import { BIG_INT_ZERO } from '../../constants'\n\nimport { OutlineCard } from '../../components/Card';\nconst PageWrapper = styled(AutoColumn)`\n  max-width: 640px;\n  width: 100%;\n`;\nconst TopSection = styled(AutoColumn)`\n  max-width: 720px;\n  width: 100%;\n`;\nconst PoolSection = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  column-gap: 10px;\n  row-gap: 15px;\n  width: 100%;\n  justify-self: center;\n`;\nconst DataRow = styled(RowBetween)`\n  ${({\n  theme\n}) => theme.mediaWidth.upToSmall`\nflex-direction: column;\n`};\n`;\nexport default function Earn() {\n  var _STAKING_REWARDS_INFO, _STAKING_REWARDS_INFO2, _stakingInfos$;\n\n  const {\n    chainId\n  } = useActiveWeb3React(); // staking info for connected account\n\n  const stakingInfos = useStakingInfo();\n  /**\n   * only show staking cards with balance\n   * @todo only account for this if rewards are inactive\n   */\n\n  const stakingInfosWithBalance = stakingInfos; // toggle copy if rewards are inactive\n\n  const stakingRewardsExist = Boolean(typeof chainId === 'number' && ((_STAKING_REWARDS_INFO = (_STAKING_REWARDS_INFO2 = STAKING_REWARDS_INFO[chainId]) === null || _STAKING_REWARDS_INFO2 === void 0 ? void 0 : _STAKING_REWARDS_INFO2.length) !== null && _STAKING_REWARDS_INFO !== void 0 ? _STAKING_REWARDS_INFO : 0) > 0);\n  return /*#__PURE__*/React.createElement(PageWrapper, {\n    gap: \"lg\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TopSection, {\n    gap: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DataCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardBGImage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CardNoise, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CardSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.white, {\n    fontWeight: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, \"Candle Liquidity Mining\")), /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.white, {\n    fontSize: 14,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, \"Deposit your Liquidity Provider tokens to receive different rewards.\")), ' ', /*#__PURE__*/React.createElement(ExternalLink, {\n    style: {\n      color: 'white',\n      textDecoration: 'underline'\n    },\n    href: \"https://blog.kleros.io/introducing-ubi-universal-basic-income-for-humans/\",\n    target: \"_blank\",\n    rel: \"noreferrer noopener\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.white, {\n    fontSize: 14,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, \"Read more about the pools.\")))), /*#__PURE__*/React.createElement(CardBGImage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CardNoise, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"lg\",\n    style: {\n      width: '100%',\n      maxWidth: '720px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DataRow, {\n    style: {\n      alignItems: 'baseline'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.mediumHeader, {\n    style: {\n      marginTop: '0.5rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, \"Participating pools\"), /*#__PURE__*/React.createElement(Countdown, {\n    exactEnd: stakingInfos === null || stakingInfos === void 0 ? void 0 : (_stakingInfos$ = stakingInfos[0]) === null || _stakingInfos$ === void 0 ? void 0 : _stakingInfos$.periodFinish,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(PoolSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, stakingRewardsExist && (stakingInfos === null || stakingInfos === void 0 ? void 0 : stakingInfos.length) === 0 ? /*#__PURE__*/React.createElement(Loader, {\n    style: {\n      margin: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }) : !stakingRewardsExist ? /*#__PURE__*/React.createElement(OutlineCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, \"No active pools\") : (stakingInfos === null || stakingInfos === void 0 ? void 0 : stakingInfos.length) !== 0 && stakingInfosWithBalance.length === 0 ? /*#__PURE__*/React.createElement(OutlineCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, \"No active pools\") : stakingInfosWithBalance === null || stakingInfosWithBalance === void 0 ? void 0 : stakingInfosWithBalance.map(stakingInfo => {\n    // need to sort by added liquidity here\n    return /*#__PURE__*/React.createElement(PoolCard, {\n      key: stakingInfo.stakingRewardAddress,\n      stakingInfo: stakingInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 22\n      }\n    });\n  }))));\n}","map":{"version":3,"sources":["/Users/safahi/Downloads/candle-pools-burn/src/pages/Earn/index.tsx"],"names":["React","AutoColumn","styled","STAKING_REWARDS_INFO","useStakingInfo","TYPE","ExternalLink","PoolCard","RowBetween","CardSection","DataCard","CardNoise","CardBGImage","Countdown","Loader","useActiveWeb3React","OutlineCard","PageWrapper","TopSection","PoolSection","div","DataRow","theme","mediaWidth","upToSmall","Earn","chainId","stakingInfos","stakingInfosWithBalance","stakingRewardsExist","Boolean","length","color","textDecoration","width","maxWidth","alignItems","marginTop","periodFinish","margin","map","stakingInfo","stakingRewardAddress"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { AutoColumn } from '../../components/Column'\nimport styled from 'styled-components'\nimport { STAKING_REWARDS_INFO, useStakingInfo } from '../../state/stake/hooks'\nimport { TYPE, ExternalLink } from '../../theme'\nimport PoolCard from '../../components/earn/PoolCard'\nimport { RowBetween } from '../../components/Row'\nimport { CardSection, DataCard, CardNoise, CardBGImage } from '../../components/earn/styled'\nimport { Countdown } from './Countdown'\nimport Loader from '../../components/Loader'\nimport { useActiveWeb3React } from '../../hooks'\n// import { JSBI } from '@uniswap/sdk'\n// import { BIG_INT_ZERO } from '../../constants'\nimport { OutlineCard } from '../../components/Card'\n\nconst PageWrapper = styled(AutoColumn)`\n  max-width: 640px;\n  width: 100%;\n`\n\nconst TopSection = styled(AutoColumn)`\n  max-width: 720px;\n  width: 100%;\n`\n\nconst PoolSection = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  column-gap: 10px;\n  row-gap: 15px;\n  width: 100%;\n  justify-self: center;\n`\n\nconst DataRow = styled(RowBetween)`\n  ${({ theme }) => theme.mediaWidth.upToSmall`\nflex-direction: column;\n`};\n`\n\nexport default function Earn() {\n  const { chainId } = useActiveWeb3React()\n\n  // staking info for connected account\n  const stakingInfos = useStakingInfo()\n\n  /**\n   * only show staking cards with balance\n   * @todo only account for this if rewards are inactive\n   */\n  const stakingInfosWithBalance = stakingInfos\n\n  // toggle copy if rewards are inactive\n  const stakingRewardsExist = Boolean(typeof chainId === 'number' && (STAKING_REWARDS_INFO[chainId]?.length ?? 0) > 0)\n\n  return (\n    <PageWrapper gap=\"lg\" justify=\"center\">\n      <TopSection gap=\"md\">\n        <DataCard>\n          <CardBGImage />\n          <CardNoise />\n          <CardSection>\n            <AutoColumn gap=\"md\">\n              <RowBetween>\n                <TYPE.white fontWeight={600}>Candle Liquidity Mining</TYPE.white>\n              </RowBetween>\n              <RowBetween>\n                <TYPE.white fontSize={14}>\n                  Deposit your Liquidity Provider tokens to receive different rewards.\n                </TYPE.white>\n              </RowBetween>{' '}\n              <ExternalLink\n                style={{ color: 'white', textDecoration: 'underline' }}\n                href=\"https://blog.kleros.io/introducing-ubi-universal-basic-income-for-humans/\"\n                target=\"_blank\"\n                rel=\"noreferrer noopener\"\n              >\n                <TYPE.white fontSize={14}>Read more about the pools.</TYPE.white>\n              </ExternalLink>\n            </AutoColumn>\n          </CardSection>\n          <CardBGImage />\n          <CardNoise />\n        </DataCard>\n      </TopSection>\n\n      <AutoColumn gap=\"lg\" style={{ width: '100%', maxWidth: '720px' }}>\n        <DataRow style={{ alignItems: 'baseline' }}>\n          <TYPE.mediumHeader style={{ marginTop: '0.5rem' }}>Participating pools</TYPE.mediumHeader>\n          <Countdown exactEnd={stakingInfos?.[0]?.periodFinish} />\n        </DataRow>\n\n        <PoolSection>\n          {stakingRewardsExist && stakingInfos?.length === 0 ? (\n            <Loader style={{ margin: 'auto' }} />\n          ) : !stakingRewardsExist ? (\n            <OutlineCard>No active pools</OutlineCard>\n          ) : stakingInfos?.length !== 0 && stakingInfosWithBalance.length === 0 ? (\n            <OutlineCard>No active pools</OutlineCard>\n          ) : (\n            stakingInfosWithBalance?.map(stakingInfo => {\n              // need to sort by added liquidity here\n              return <PoolCard key={stakingInfo.stakingRewardAddress} stakingInfo={stakingInfo} />\n            })\n          )}\n        </PoolSection>\n      </AutoColumn>\n    </PageWrapper>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}